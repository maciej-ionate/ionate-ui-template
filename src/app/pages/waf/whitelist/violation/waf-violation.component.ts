import { Component, ViewEncapsulation } from '@angular/core';
import { WafService } from '../../service/waf.service';
import { WafViolationConfig } from './waf-violation-config';
import { Violation } from '../model/violation';

@Component({
  selector: 'waf-generate-whitelist',
  styleUrls: [('./waf-violation.component.scss')],
  templateUrl: './waf-violation.component.html',
  encapsulation: ViewEncapsulation.None,
})
export class WafViolationComponent {

  static DOWNLOAD_VIOLATION = 'downloadViolation';

  modalHeader: string = 'WAF violation';
  modalContent: string = '<p>Downloading WAF violation. Pleas wait.';

  _config: WafViolationConfig;

  status = {
    inProgress: {
      downloadViolation: false
    }
  };

  constructor(
              // private activeModal: NgbActiveModal,
              private wafService: WafService) {
  }

  set config(config: WafViolationConfig) {
    this._config = config;
    this.downloadWafViolation();
  }

  get config(): WafViolationConfig {
    return this._config;
  }

  private downloadWafViolation() {
    this.requestStarted(WafViolationComponent.DOWNLOAD_VIOLATION);
    this.wafService.getViolation(this.config.serviceInstance, this.config.ruleId)
      .subscribe(
        violation => this.onViolationDownloadSuccess(violation),
        () => this.onViolationDownloadFailure()
      );
  }

  private onViolationDownloadSuccess(violation: Violation): void {
    this.requestFinished(WafViolationComponent.DOWNLOAD_VIOLATION);
    this.modalContent =
      `<p>A violation was generated by following request:</p>
        <div class="waf-violation-request">${violation.content}</div>`;
  }

  private onViolationDownloadFailure(): void {
    this.requestFinished(WafViolationComponent.DOWNLOAD_VIOLATION);
    this.modalContent = `<p>A problem occurred while downloading WAF violation.</p>`;
  }

  closeModal() {
    // this.activeModal.close();
  }

  private requestStarted(action: string) {
    this.status.inProgress[action] = true;
  }

  private requestFinished(action: string) {
    this.status.inProgress[action] = false;
  }
}
